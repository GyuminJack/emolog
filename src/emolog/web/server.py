"""
Emolog Web Dashboard Server
The emotional attic where memories and feelings live
"""

import webbrowser
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

import uvicorn
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from ..core.analyzer import EmotionAnalyzer
from ..core.data_manager import DataManager

# Get the web directory path
WEB_DIR = Path(__file__).parent
STATIC_DIR = WEB_DIR / "static"
TEMPLATES_DIR = WEB_DIR / "templates"

# Create FastAPI app
app = FastAPI(
    title="Emolog - The Emotional Attic",
    description="A peaceful place to explore your feelings",
    version="1.0.0",
)

# Mount static files
app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")

# Setup templates
templates = Jinja2Templates(directory=str(TEMPLATES_DIR))

# Initialize data manager and analyzer
data_manager = DataManager()
analyzer = EmotionAnalyzer()


@app.get("/", response_class=HTMLResponse)
async def dashboard(request: Request):
    """The main attic dashboard"""
    # Get recent emotion data
    recent_entries = data_manager.get_recent_entries(limit=10)
    today_entries = data_manager.get_today_entries()

    # Format timestamps for display
    recent_entries = format_entries_for_display(recent_entries)
    today_entries = format_entries_for_display(today_entries)

    # Get current dominant emotion for the window view
    current_mood = get_current_mood(recent_entries)

    # Get summary stats
    stats = get_dashboard_stats(recent_entries)

    return templates.TemplateResponse(
        "dashboard.html",
        {
            "request": request,
            "current_mood": current_mood,
            "recent_entries": recent_entries,
            "today_entries": today_entries,
            "stats": stats,
        },
    )


@app.get("/api/emotions")
async def get_emotions() -> List[Dict[str, Any]]:
    """Get recent emotion entries as JSON"""
    entries = data_manager.get_recent_entries(limit=50)
    return entries


@app.get("/api/stats")
async def get_stats() -> Dict[str, Any]:
    """Get emotion statistics"""
    entries = data_manager.get_recent_entries(limit=100)
    return get_dashboard_stats(entries)


@app.get("/api/mood")
async def get_current_mood_api() -> Dict[str, str]:
    """Get current mood for the window view"""
    recent_entries = data_manager.get_recent_entries(limit=5)
    mood = get_current_mood(recent_entries)
    return {"mood": mood, "description": get_mood_description(mood)}


def get_current_mood(entries: List[Dict[str, Any]]) -> str:
    """Determine current dominant mood from recent entries"""
    if not entries:
        return "peaceful"

    # Get the most recent emotion
    latest_emotion = entries[-1].get("emotion", "").lower()

    # Map emotions to window moods
    mood_mapping = {
        # Positive emotions
        "Í∏∞ÏÅ®": "sunny",
        "ÎßåÏ°±": "sunny",
        "ÏûêÏã†Í∞ê": "clear",
        "ÏïàÎèÑ": "clear",
        "ÏÑ§Î†ò": "sunny",
        "ÌèâÏò®": "peaceful",
        "ÌñâÎ≥µ": "sunny",
        "Í∞êÏÇ¨": "clear",
        "ÏÑ±Ï∑®Í∞ê": "sunny",
        "Ìù¨Îßù": "clear",
        "Ìé∏ÏïàÌï®": "peaceful",
        "ÎøåÎìØÌï®": "sunny",
        # Negative emotions
        "Ïä§Ìä∏Î†àÏä§": "storm",
        "Î∂àÏïà": "cloudy",
        "Ï¢åÏ†à": "rainy",
        "ÌôîÎÇ®": "storm",
        "Í∏¥Ïû•": "cloudy",
        "ÌîºÎ°ú": "foggy",
        "Í±±Ï†ï": "cloudy",
        "Ïä¨Ìîî": "rainy",
        "ÏßúÏ¶ù": "storm",
        "Ïã§Îßù": "rainy",
        "Ïö∞Ïö∏": "rainy",
        "ÎëêÎ†§ÏõÄ": "storm",
        # Neutral emotions
        "Î¨¥Í∏∞Î†•": "foggy",
        "ÌòºÎûÄ": "cloudy",
        "ÏßëÏ§ë": "clear",
        "Ìò∏Í∏∞Ïã¨": "clear",
        "ÌèâÎ≤îÌï®": "peaceful",
        "Î¨¥Í∞êÏ†ï": "foggy",
    }

    return mood_mapping.get(latest_emotion, "peaceful")


def get_mood_description(mood: str) -> str:
    """Get poetic description for the current mood"""
    descriptions = {
        "sunny": "Îî∞Ïä§Ìïú ÌñáÏÇ¥Ïù¥ Ï∞ΩÎ¨∏ÏùÑ ÌÜµÌï¥ Îì§Ïñ¥Ïò§Í≥†, ÏÉàÎì§Ïù¥ ÏßÄÏ†ÄÍ∑ÄÎäî ÏÜåÎ¶¨Í∞Ä Îì§Î¶ΩÎãàÎã§",
        "clear": "ÎßëÍ≥† Ï≤≠Î™ÖÌïú ÌïòÎäòÏù¥ Î≥¥Ïù¥Î©∞, ÏÇ∞Îì§Î∞îÎûåÏù¥ Ïª§ÌäºÏùÑ ÏÇ¥Îûë ÌùîÎì≠ÎãàÎã§",
        "peaceful": "Í≥†ÏöîÌïú Ïò§ÌõÑ, Íµ¨Î¶ÑÏù¥ Ï≤úÏ≤úÌûà ÌùòÎü¨Í∞ÄÎäî ÌèâÏò®Ìïú ÌíçÍ≤ΩÏûÖÎãàÎã§",
        "cloudy": "ÌöåÏÉâ Íµ¨Î¶ÑÏù¥ ÌïòÎäòÏùÑ ÎçÆÍ≥† ÏûàÏßÄÎßå, Í∑∏ ÏÇ¨Ïù¥Î°ú ÎπõÏù¥ Ïä§Î©∞Îì≠ÎãàÎã§",
        "foggy": "Î∂ÄÎìúÎü¨Ïö¥ ÏïàÍ∞úÍ∞Ä ÏÑ∏ÏÉÅÏùÑ Í∞êÏã∏Í≥† ÏûàÏñ¥, Î™®Îì† Í≤ÉÏù¥ Î™ΩÌôòÏ†ÅÏûÖÎãàÎã§",
        "rainy": "Ï∞ΩÎ¨∏Ïóê ÎπóÎ∞©Ïö∏Ïù¥ ÎòêÎ•¥Î•¥ ÌùòÎü¨ÎÇ¥Î¶¨Î©∞, Ï∞®Î∂ÑÌïú ÎπóÏÜåÎ¶¨Í∞Ä Îì§Î¶ΩÎãàÎã§",
        "storm": "Î®πÍµ¨Î¶ÑÏù¥ Î™∞Î†§Ïò§Í≥† Î≤àÍ∞úÍ∞Ä Î≤àÏ©çÏù¥ÏßÄÎßå, Ïù¥ÎÇ¥ ÏßÄÎÇòÍ∞à Í≤ÉÏûÖÎãàÎã§",
    }
    return descriptions.get(mood, "Ïïå Ïàò ÏóÜÎäî ÌíçÍ≤ΩÏù¥ Ï∞ΩÎ∞ñÏóê ÌéºÏ≥êÏ†∏ ÏûàÏäµÎãàÎã§")


def format_entries_for_display(entries: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """Format entry timestamps for better display with date and AM/PM"""
    import re
    from datetime import datetime

    formatted_entries = []
    for entry in entries:
        formatted_entry = entry.copy()
        timestamp = entry.get("timestamp", "")

        try:
            # Handle different timestamp formats
            if "T" in timestamp:
                # ISO format: "2024-01-01T14:30:00+09:00"
                # Remove timezone info
                clean_timestamp = re.sub(r"([+-]\d{2}:\d{2}|Z)$", "", timestamp)
                dt = datetime.fromisoformat(clean_timestamp)
            else:
                # Try to parse other formats
                dt = datetime.fromisoformat(timestamp)

            # Format as Korean style with AM/PM
            date_str = dt.strftime("%m/%d")  # MM/DD
            time_str = dt.strftime("%I:%M %p")  # HH:MM AM/PM

            # Convert AM/PM to Korean
            time_str = time_str.replace("AM", "Ïò§Ï†Ñ").replace("PM", "Ïò§ÌõÑ")

            formatted_entry["display_time"] = f"{date_str} {time_str}"
            formatted_entry["display_date"] = date_str
            formatted_entry["display_clock"] = time_str

        except Exception as e:
            # Fallback for unparseable timestamps
            formatted_entry["display_time"] = (
                timestamp[-8:-3] if len(timestamp) >= 8 else timestamp
            )
            formatted_entry["display_date"] = "ÎÇ†ÏßúÎ∂àÎ™Ö"
            formatted_entry["display_clock"] = (
                timestamp[-8:-3] if len(timestamp) >= 8 else timestamp
            )

        formatted_entries.append(formatted_entry)
    return formatted_entries


def get_dashboard_stats(entries: List[Dict[str, Any]]) -> Dict[str, Any]:
    """Calculate dashboard statistics"""
    if not entries:
        return {
            "total_entries": 0,
            "avg_intensity": 0,
            "top_emotions": [],
            "top_contexts": [],
        }

    # Calculate basic stats
    total_entries = len(entries)
    intensities = [entry.get("intensity", 5) for entry in entries]
    avg_intensity = sum(intensities) / len(intensities) if intensities else 0

    # Count emotions and contexts
    emotions = [entry.get("emotion", "") for entry in entries if entry.get("emotion")]
    contexts = [entry.get("context", "") for entry in entries if entry.get("context")]

    from collections import Counter

    emotion_counts = Counter(emotions)
    context_counts = Counter(contexts)

    return {
        "total_entries": total_entries,
        "avg_intensity": round(avg_intensity, 1),
        "top_emotions": emotion_counts.most_common(5),
        "top_contexts": context_counts.most_common(3),
    }


def start_server(port: int = 8080, open_browser: bool = False, debug: bool = False):
    """Start the web dashboard server"""
    from rich.console import Console

    console = Console()

    # Create directories if they don't exist
    STATIC_DIR.mkdir(parents=True, exist_ok=True)
    TEMPLATES_DIR.mkdir(parents=True, exist_ok=True)

    url = f"http://localhost:{port}"

    console.print(f"\nüè† Welcome to your emotional attic...")
    console.print(f"üåê Dashboard starting at: [bold blue]{url}[/bold blue]")
    console.print(f"ü™ü Looking out the window of your feelings...")
    console.print(f"‚ú® Press Ctrl+C to close the attic door\n")

    if open_browser:
        webbrowser.open(url)

    try:
        uvicorn.run(
            "emolog.web.server:app",
            host="127.0.0.1",
            port=port,
            reload=debug,
            log_level="info" if debug else "error",
        )
    except KeyboardInterrupt:
        console.print("\nüö™ Closing the attic door... goodbye! üëã")
